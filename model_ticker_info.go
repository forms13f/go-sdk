/*
SEC form 13F API

API for SEC form filings such as 13F.

API version: 1.0.0
Contact: forms13f@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forms13f

import (
	"encoding/json"
)

// checks if the TickerInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TickerInfo{}

// TickerInfo struct for TickerInfo
type TickerInfo struct {
	Cusip *string `json:"cusip,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
	CompanyName *string `json:"company_name,omitempty"`
}

// NewTickerInfo instantiates a new TickerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTickerInfo() *TickerInfo {
	this := TickerInfo{}
	return &this
}

// NewTickerInfoWithDefaults instantiates a new TickerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTickerInfoWithDefaults() *TickerInfo {
	this := TickerInfo{}
	return &this
}

// GetCusip returns the Cusip field value if set, zero value otherwise.
func (o *TickerInfo) GetCusip() string {
	if o == nil || IsNil(o.Cusip) {
		var ret string
		return ret
	}
	return *o.Cusip
}

// GetCusipOk returns a tuple with the Cusip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TickerInfo) GetCusipOk() (*string, bool) {
	if o == nil || IsNil(o.Cusip) {
		return nil, false
	}
	return o.Cusip, true
}

// HasCusip returns a boolean if a field has been set.
func (o *TickerInfo) HasCusip() bool {
	if o != nil && !IsNil(o.Cusip) {
		return true
	}

	return false
}

// SetCusip gets a reference to the given string and assigns it to the Cusip field.
func (o *TickerInfo) SetCusip(v string) {
	o.Cusip = &v
}

// GetTicker returns the Ticker field value if set, zero value otherwise.
func (o *TickerInfo) GetTicker() string {
	if o == nil || IsNil(o.Ticker) {
		var ret string
		return ret
	}
	return *o.Ticker
}

// GetTickerOk returns a tuple with the Ticker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TickerInfo) GetTickerOk() (*string, bool) {
	if o == nil || IsNil(o.Ticker) {
		return nil, false
	}
	return o.Ticker, true
}

// HasTicker returns a boolean if a field has been set.
func (o *TickerInfo) HasTicker() bool {
	if o != nil && !IsNil(o.Ticker) {
		return true
	}

	return false
}

// SetTicker gets a reference to the given string and assigns it to the Ticker field.
func (o *TickerInfo) SetTicker(v string) {
	o.Ticker = &v
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise.
func (o *TickerInfo) GetCompanyName() string {
	if o == nil || IsNil(o.CompanyName) {
		var ret string
		return ret
	}
	return *o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TickerInfo) GetCompanyNameOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyName) {
		return nil, false
	}
	return o.CompanyName, true
}

// HasCompanyName returns a boolean if a field has been set.
func (o *TickerInfo) HasCompanyName() bool {
	if o != nil && !IsNil(o.CompanyName) {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given string and assigns it to the CompanyName field.
func (o *TickerInfo) SetCompanyName(v string) {
	o.CompanyName = &v
}

func (o TickerInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TickerInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cusip) {
		toSerialize["cusip"] = o.Cusip
	}
	if !IsNil(o.Ticker) {
		toSerialize["ticker"] = o.Ticker
	}
	if !IsNil(o.CompanyName) {
		toSerialize["company_name"] = o.CompanyName
	}
	return toSerialize, nil
}

type NullableTickerInfo struct {
	value *TickerInfo
	isSet bool
}

func (v NullableTickerInfo) Get() *TickerInfo {
	return v.value
}

func (v *NullableTickerInfo) Set(val *TickerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTickerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTickerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTickerInfo(val *TickerInfo) *NullableTickerInfo {
	return &NullableTickerInfo{value: val, isSet: true}
}

func (v NullableTickerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTickerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


